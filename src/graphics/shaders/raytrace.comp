#version 450

#extension GL_EXT_shader_explicit_arithmetic_types_int8: require
#extension GL_EXT_shader_8bit_storage: require
#extension GL_EXT_scalar_block_layout: require

precision highp float;

#include "math.glslh"



/* ===== Shader Input ===== */
layout (local_size_x = 32, local_size_y = 32) in;

layout (binding = 0, set = 0, rgba8) uniform writeonly image2D colorImage;

layout (binding = 0, set = 1, rgba8) uniform image2D oldColorImage;

layout (binding = 0, set = 2, rgba8) uniform image2D normalImage;

layout (binding = 0, set = 3, rgba8) uniform image2D positionImage;

layout (scalar, binding = 0, set = 4) buffer stateBuffer
{
    uint8_t state[];
};

layout (binding = 0, set = 5) uniform SceneInfoUBO {
    ivec2 screen_dimensions;
    ivec3 world_dimensions;

    vec3 camera_position;
    vec3 camera_direction;
    vec3 old_camera_position;
    vec3 old_camera_direction;

    int chunk_size;
    int local_size;
} scene_info;

layout (scalar, binding = 0, set = 6) buffer subchunkStateBuffer
{
    uint8_t subchunk_state[];
};

layout (push_constant) uniform Push {
    int frame_num;
    int max_ray_steps;
    int max_bounces;
    int rays_per_pixel;
    int use_blue_noise;
    int use_temp_accumulation;
    int invalidate_accumulation;
} push;



/* ===== Voxel Rendering Data ===== */
struct VoxelMaterial {
    bool transparent;
    vec3 color;
    vec3 emmision_color;
    float emmision_strength;
};

const VoxelMaterial voxeldata[4] = VoxelMaterial[](
    VoxelMaterial(true, vec3(0.0f), vec3(0.0f), 0.0f),                          // Air
    VoxelMaterial(false, vec3(0.761f, 0.698f, 0.502f), vec3(0.0f), 0.0f),       // Sand
    VoxelMaterial(false, vec3(0.608f, 0.463f, 0.326f), vec3(0.0f), 0.0f),       // Dirt
    VoxelMaterial(false, vec3(0.831f, 0.945f, 0.977f), vec3(0.0f), 0.0f)        // Water
);



/* ===== Helper Functions ===== */
VoxelMaterial getVoxel(ivec3 loc) {
    if (length(vec3(loc - (scene_info.world_dimensions + ivec3(5, 20, 5)))) < 20.0f) {
        return VoxelMaterial(false, vec3(0.0f), vec3(0.988f, 0.898f, 0.439f), 1.0f);
    }
	int index = loc.z * scene_info.world_dimensions.y * scene_info.world_dimensions.x + loc.y * scene_info.world_dimensions.x + loc.x;
    if (loc.x >= 0 && loc.x < scene_info.world_dimensions.x &&
        loc.y >= 0 && loc.y < scene_info.world_dimensions.y &&
        loc.z >= 0 && loc.z < scene_info.world_dimensions.z) {
        int voxel = int(state[index]);
	    return voxeldata[voxel];
    } else {
        return voxeldata[0];
    }
}



/* ===== Raytracing Implementation ===== */
struct ray {
    vec3 position;
    vec3 direction;
};

struct traceRayInfo {
    vec3 incoming_light;
    vec3 old_camera_adj_direction;
};

traceRayInfo traceRay(vec3 ray_pos, vec3 ray_dir, int ray_index) {
    vec3 incoming_light = vec3(0.0f);
    vec3 ray_color = vec3(1.0f);

    bool first_bounce = true;
    vec3 initial_hit_pos = ray_pos;
    for (int raybounce = 0; raybounce < push.max_bounces; raybounce++) {
        uint total_ray_index = ray_index * push.max_bounces + raybounce;

        ivec3 voxel_pos = ivec3(floor(ray_pos + 0.));

        vec3 t_delta_dist = abs(vec3(length(ray_dir)) / ray_dir);

        ivec3 ray_step = ivec3(sign(ray_dir));

        // Add tMin later
        vec3 t_bound_dist = (sign(ray_dir) * (vec3(voxel_pos) - ray_pos) + (sign(ray_dir) * 0.5) + 0.5) * t_delta_dist;

        bool hit = false;
        float final_t = 0.0f;

        VoxelMaterial voxel;
        vec3 normal_pos = ray_pos;
        vec3 normal_dir = ray_dir;

        for (int i = 0; i < push.max_ray_steps; i++) {
            voxel = getVoxel(voxel_pos);
            if (!voxel.transparent) {
                hit = true;
                break;
            }
            if (t_bound_dist.x < t_bound_dist.y) {
                if (t_bound_dist.x < t_bound_dist.z) {
                    float face = float(voxel_pos.x) + ((0.5f * ray_step.x) + 0.5f);
                    final_t = (face - ray_pos.x) / ray_dir.x;
                    t_bound_dist.x += t_delta_dist.x;
                    voxel_pos.x += ray_step.x;
                    normal_dir = vec3(-float(ray_step.x), 0.0f, 0.0f);
                }
                else {
                    float face = float(voxel_pos.z) + ((0.5f * ray_step.z) + 0.5f);
                    final_t = (face - ray_pos.z) / ray_dir.z;
                    t_bound_dist.z += t_delta_dist.z;
                    voxel_pos.z += ray_step.z;
                    normal_dir = vec3(0.0f, 0.0f, -float(ray_step.z));
                }
            }
            else {
                if (t_bound_dist.y < t_bound_dist.z) {
                    float face = float(voxel_pos.y) + ((0.5f * ray_step.y) + 0.5f);
                    final_t = (face - ray_pos.y) / ray_dir.y;
                    t_bound_dist.y += t_delta_dist.y;
                    voxel_pos.y += ray_step.y;
                    normal_dir = vec3(0.0f, -float(ray_step.y), 0.0f);
                }
                else {
                    float face = float(voxel_pos.z) + ((0.5f * ray_step.z) + 0.5f);
                    final_t = (face - ray_pos.z) / ray_dir.z;
                    t_bound_dist.z += t_delta_dist.z;
                    voxel_pos.z += ray_step.z;
                    normal_dir = vec3(0.0f, 0.0f, -float(ray_step.z));
                }
            }
        }
        normal_pos = ray_pos + (final_t - 0.01f) * ray_dir;

        if (hit) {
            // Send a new ray at an angle to the surface that was hit
            uint pixel_index = gl_GlobalInvocationID.y * scene_info.screen_dimensions.x + gl_GlobalInvocationID.x;
            ray_pos = normal_pos;
            if (push.use_blue_noise != 0) {
                vec2 frame_offset = scene_info.screen_dimensions * (push.frame_num % 4);
                ray_dir = randomHemisphereDirectionBlueNoise(gl_GlobalInvocationID.xy + frame_offset,
                                                             gl_GlobalInvocationID.xy + 4 * scene_info.screen_dimensions + frame_offset,
                                                             normal_dir, 
                                                             total_ray_index, 
                                                             push.max_bounces * push.rays_per_pixel);
            } else {
                ray_dir = normalize(normal_dir + randomDirection(pixel_index));
            }

            // Mix the color of the hit object into the ray color
            vec3 emmited_light = voxel.emmision_color * voxel.emmision_strength;
            incoming_light += emmited_light * ray_color;
            ray_color *= voxel.color;
            
            if (first_bounce) {
                imageStore(normalImage, ivec2(gl_GlobalInvocationID.xy), vec4(normal_dir * 0.5f + 0.5f, 1.0f));
                imageStore(positionImage, ivec2(gl_GlobalInvocationID.xy), vec4(vec3(voxel_pos) / scene_info.world_dimensions, 1.0f));
                initial_hit_pos = normal_pos;
                first_bounce = false;
            }
        } else {
            VoxelMaterial ambient = VoxelMaterial(true, vec3(1.0f), vec3(1.0f), 0.2f);
            incoming_light += ambient.emmision_color * ambient.emmision_strength * ray_color;
            break;
        }
    }

    traceRayInfo ray_info;
    ray_info.incoming_light = incoming_light;
    ray_info.old_camera_adj_direction = normalize(initial_hit_pos - scene_info.old_camera_position);
    
    return ray_info;
}

vec3 pixelToRay(vec2 screen_coords, vec2 screen_dimensions, float fov, vec3 camera_direction) {
    float aspect_ratio = screen_dimensions.x / screen_dimensions.y;

    // Convert to NDC
    vec2 ndc = (screen_coords / screen_dimensions) * 2.0f - 1.0f;

    float fov_scaling = tan(fov / 2.0f);

    // Ray in camera space
    vec3 ray_camera_space = vec3(ndc.x * aspect_ratio * fov_scaling, ndc.y * fov_scaling, 1.0f);

    // Ray in world space
    vec3 camera_plane_u = normalize(cross(camera_direction, vec3(0.0, 1.0, 0.0)));
    vec3 camera_plane_v = normalize(cross(camera_direction, camera_plane_u));
    vec3 ray_world_space = ray_camera_space.x * camera_plane_u + ray_camera_space.y * camera_plane_v + ray_camera_space.z * camera_direction;
    return normalize(ray_world_space);
}

vec2 rayToPixel(vec3 ray_direction, vec2 screen_dimensions, float fov, vec3 old_camera_direction) {
    float aspect_ratio = screen_dimensions.x / screen_dimensions.y;

    vec3 camera_plane_u = normalize(cross(old_camera_direction, vec3(0.0, 1.0, 0.0)));
    vec3 camera_plane_v = normalize(cross(old_camera_direction, camera_plane_u));
    vec3 ray_camera_space = vec3(dot(ray_direction, camera_plane_u), dot(ray_direction, camera_plane_v), dot(ray_direction, old_camera_direction));

    float fov_scaling = tan(fov / 2.0f);

    vec2 ndc = vec2(ray_camera_space.x / (aspect_ratio * fov_scaling * ray_camera_space.z), ray_camera_space.y / (fov_scaling * ray_camera_space.z));

    vec2 screen_coords = ((ndc + 1.0f) / 2.0f) * screen_dimensions;

    return screen_coords;
}

void main() {
    vec3 ray_pos = scene_info.camera_position;
    vec3 ray_dir = pixelToRay(gl_GlobalInvocationID.xy, scene_info.screen_dimensions, 3.141592f / 2.0f, scene_info.camera_direction);

    vec3 total_incoming_light = vec3(0.0f);
    traceRayInfo ray_info;
    for (int ray_index = 0; ray_index < push.rays_per_pixel; ray_index++) {
        ray_info = traceRay(ray_pos, ray_dir, ray_index);
        total_incoming_light += ray_info.incoming_light;
    }
    vec3 new_pixel_color = total_incoming_light / push.rays_per_pixel;

    vec2 old_screen_coords = rayToPixel(ray_info.old_camera_adj_direction, scene_info.screen_dimensions, 3.141592f / 2.0f, scene_info.old_camera_direction);
    vec3 old_pixel_color = vec3(imageLoad(oldColorImage, ivec2(old_screen_coords)));

    vec3 final_color;
    if (push.use_temp_accumulation != 0 && push.invalidate_accumulation == 0 && old_screen_coords.x < scene_info.screen_dimensions.x && old_screen_coords.x >= 0 && old_screen_coords.y < scene_info.screen_dimensions.y && old_screen_coords.y >= 0) {
        final_color = old_pixel_color * 0.65f + new_pixel_color * 0.35f;
    } else {
        final_color = new_pixel_color;
    }
    
    imageStore(colorImage, ivec2(gl_GlobalInvocationID.xy), vec4(final_color, 1.0f));
}